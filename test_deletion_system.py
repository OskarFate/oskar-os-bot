#!/usr/bin/env python3
"""
Test script para el sistema de eliminaci√≥n inteligente
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
import logging

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from bot.ai_interpreter import AIInterpreter
from bot.telegram_interface import TelegramInterface
from config.settings import settings

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_deletion_patterns():
    """Probar patrones de detecci√≥n de eliminaci√≥n"""
    print("üß™ Testing deletion pattern detection...")
    
    # Crear instancia del interface (solo para acceder a los m√©todos)
    interface = TelegramInterface(None, None, None, None, None)
    
    # Test cases para detecci√≥n de eliminaci√≥n
    test_cases = [
        # Casos que DEBER√çAN ser detectados como eliminaci√≥n
        ("eliminar gym", True),
        ("borra el recordatorio de pastillas", True),
        ("cancela todos los recordatorios del m√©dico", True),
        ("quitar ejercicio", True),
        ("gym todos los d√≠as excepto viernes", True),  # Excepci√≥n
        ("pastillas todos los d√≠as menos el domingo", True),  # Excepci√≥n
        ("delete reminder", True),
        ("remove workout", True),
        ("anular cita m√©dico", True),
        
        # Casos que NO deber√≠an ser detectados como eliminaci√≥n
        ("recordar ir al gym", False),
        ("pastillas todos los d√≠as", False),
        ("completar ejercicio ma√±ana", False),
        ("nota sobre eliminar malos h√°bitos", False),
        ("tarea de programaci√≥n", False),
    ]
    
    for test_text, expected in test_cases:
        result = interface._has_deletion_pattern(test_text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{test_text}' ‚Üí {result} (expected: {expected})")

async def test_ai_deletion_parsing():
    """Probar parseo de AI para eliminaci√≥n"""
    print("\nü§ñ Testing AI deletion parsing...")
    
    if not settings.OPENROUTER_API_KEY:
        print("‚ö†Ô∏è OPENROUTER_API_KEY no configurado, saltando test de AI")
        return
    
    ai = AIInterpreter()
    
    # Test cases para parseo de AI
    test_cases = [
        "eliminar gym",
        "borra todos los recordatorios de pastillas",
        "cancela la reuni√≥n de ma√±ana",
        "gym todos los d√≠as excepto viernes",
        "pastillas todos los d√≠as menos el domingo",
        "remove all workout reminders",
        "delete reminder about doctor appointment"
    ]
    
    for test_text in test_cases:
        try:
            result = await ai.parse_deletion_request(test_text)
            print(f"üìù '{test_text}':")
            print(f"   Type: {result.get('type', 'unknown')}")
            print(f"   Target: {result.get('target', 'none')}")
            if 'exception_dates' in result:
                print(f"   Exceptions: {result['exception_dates']}")
            print()
        except Exception as e:
            print(f"‚ùå Error parsing '{test_text}': {e}")

async def test_reminder_detection():
    """Probar detecci√≥n general de recordatorios incluyendo eliminaci√≥n"""
    print("\nüìù Testing general reminder detection...")
    
    interface = TelegramInterface(None, None, None, None, None)
    
    test_cases = [
        ("recordar ir al gym ma√±ana", True),
        ("eliminar gym", True),  # Debe ser detectado como recordatorio
        ("borra el recordatorio de pastillas", True),  # Debe ser detectado como recordatorio
        ("pastillas todos los d√≠as excepto viernes", True),  # Debe ser detectado como recordatorio
        ("hola, ¬øc√≥mo est√°s?", False),
        ("nota: comprar leche", False),
        ("el clima est√° lindo", False),
    ]
    
    for test_text, expected in test_cases:
        result = interface._is_reminder_request(test_text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{test_text}' ‚Üí {result} (expected: {expected})")

async def main():
    """Funci√≥n principal de testing"""
    print("üß™ TESTING DELETION SYSTEM")
    print("=" * 50)
    
    try:
        await test_deletion_patterns()
        await test_reminder_detection()
        await test_ai_deletion_parsing()
        
        print("\n‚úÖ All tests completed!")
        
    except Exception as e:
        print(f"\n‚ùå Error during testing: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())