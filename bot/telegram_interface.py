"""
Interfaz principal del bot de Telegram con aiogram
"""

import asyncio
import re
from datetime import datetime
from typing import Optional
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, BotCommand
from aiogram.exceptions import TelegramAPIError
from loguru import logger

from database.connection import DatabaseManager
from bot.ai_interpreter import AIInterpreter
from bot.reminder_manager import ReminderManager
from bot.note_manager import NoteManager
from bot.memory_index import MemoryIndex
from config.settings import settings
from utils.helpers import (
    format_reminders_list, 
    sanitize_input, 
    validate_telegram_user_id,
    truncate_text,
    format_datetime_for_user
)


class TelegramBot:
    """Bot principal de Telegram"""
    
    def __init__(self, token: str, db_manager: DatabaseManager, openrouter_api_key: str):
        self.token = token
        self.db = db_manager
        
        # Inicializar bot y dispatcher
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        
        # Inicializar componentes
        self.ai_interpreter = AIInterpreter(openrouter_api_key)
        self.reminder_manager = ReminderManager(db_manager)
        self.note_manager = NoteManager(db_manager, self.ai_interpreter)
        self.memory_index = MemoryIndex(db_manager)
        
        # Registrar handlers
        self._register_handlers()
    
    def _register_handlers(self):
        """Registrar manejadores de comandos y mensajes"""
        
        # Comandos
        self.dp.message.register(self._cmd_start, CommandStart())
        self.dp.message.register(self._cmd_recordar, Command("recordar"))
        self.dp.message.register(self._cmd_nota, Command("nota"))
        self.dp.message.register(self._cmd_listar, Command("listar"))
        self.dp.message.register(self._cmd_buscar, Command("buscar"))
        self.dp.message.register(self._cmd_resumen, Command("resumen"))
        self.dp.message.register(self._cmd_calendar, Command("calendar"))
        self.dp.message.register(self._cmd_status, Command("status"))
        self.dp.message.register(self._cmd_help, Command("help", "ayuda"))
        
        # Mensajes de texto general
        self.dp.message.register(self._handle_text_message)
    
    async def start(self):
        """Iniciar el bot"""
        try:
            # Configurar comandos del bot
            await self._set_bot_commands()
            
            # Obtener informaci√≥n del bot
            bot_info = await self.bot.get_me()
            logger.info(f"ü§ñ Bot iniciado: @{bot_info.username}")
            
            # Iniciar polling
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"‚ùå Error iniciando bot: {e}")
            raise
    
    async def _set_bot_commands(self):
        """Configurar comandos del bot para el men√∫"""
        commands = [
            BotCommand(command="start", description="ü§ñ Inicializar bot"),
            BotCommand(command="recordar", description="‚è∞ Crear recordatorio"),
            BotCommand(command="nota", description="üìù Guardar nota"),
            BotCommand(command="listar", description="üìã Ver recordatorios"),
            BotCommand(command="buscar", description="üîç Buscar notas"),
            BotCommand(command="resumen", description="üìä Resumen semanal"),
            BotCommand(command="calendar", description="üçé Estado Apple Calendar"),
            BotCommand(command="status", description="‚öôÔ∏è Estado del sistema"),
            BotCommand(command="help", description="‚ùì Ayuda"),
        ]
        
        await self.bot.set_my_commands(commands)
        logger.info("üìã Comandos del bot configurados")
    
    async def _register_user(self, user: types.User) -> bool:
        """Registrar o actualizar usuario en base de datos"""
        try:
            if not validate_telegram_user_id(user.id):
                logger.error(f"‚ùå ID de usuario inv√°lido: {user.id}")
                return False
            
            user_data = {
                "user_id": user.id,
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "language": user.language_code or "es",
                "timezone": settings.DEFAULT_TIMEZONE,
                "last_activity": datetime.utcnow(),
                "is_active": True
            }
            
            success = await self.db.add_user(user_data)
            
            if success:
                logger.info(f"üë§ Usuario registrado/actualizado: {user.id} (@{user.username})")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error registrando usuario: {e}")
            return False
    
    # --- COMANDOS ---
    
    async def _cmd_start(self, message: Message):
        """Comando /start - Bienvenida"""
        try:
            await self._register_user(message.from_user)
            
            welcome_text = """üß† **¬°Bienvenido a OskarOS Assistant Bot!**

Soy tu segundo cerebro personal con IA. Puedo ayudarte con:

‚è∞ **Recordatorios inteligentes**
- Interpreto lenguaje natural: "recu√©rdame en 3 horas"
- Pre-alertas autom√°ticas (7d, 2d, 1d antes)

üìù **Notas sem√°nticas**
- Clasificaci√≥n autom√°tica por tema y prioridad
- B√∫squeda inteligente

üìä **Res√∫menes con IA**
- An√°lisis semanal de tu productividad

**Comandos principales:**
/recordar - Crear recordatorio
/nota - Guardar nota  
/listar - Ver recordatorios pendientes
/buscar - Buscar en tus notas
/resumen - Resumen semanal
/status - Estado del sistema

**¬øC√≥mo empezar?**
Simplemente escribe algo como:
‚Ä¢ "Recu√©rdame llamar al m√©dico ma√±ana a las 9"
‚Ä¢ "/nota Idea: crear app de productividad"

¬°Empecemos! üöÄ"""

            await message.answer(welcome_text, parse_mode="Markdown")
            
            # Agregar contexto de bienvenida
            await self.memory_index.add_context(
                message.from_user.id,
                "Usuario nuevo, mostr√≥ mensaje de bienvenida",
                "bot_interaction"
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error en comando start: {e}")
            await message.answer("‚ùå Error iniciando el bot. Intenta de nuevo.")
    
    async def _cmd_recordar(self, message: Message):
        """Comando /recordar - Crear recordatorio"""
        try:
            await self._register_user(message.from_user)
            
            # Extraer texto del comando
            command_text = message.text
            if not command_text or len(command_text.split()) < 2:
                await message.answer(
                    "‚è∞ **Crear recordatorio**\n\n"
                    "Uso: `/recordar <descripci√≥n con tiempo>`\n\n"
                    "Ejemplos:\n"
                    "‚Ä¢ `/recordar llamar al m√©dico ma√±ana a las 9`\n"
                    "‚Ä¢ `/recordar entregar proyecto en 3 d√≠as`\n"
                    "‚Ä¢ `/recordar reuni√≥n el 25 de octubre a las 15:00`",
                    parse_mode="Markdown"
                )
                return
            
            # Remover comando y obtener contenido
            reminder_input = command_text[9:].strip()  # Remover "/recordar "
            
            await self._process_reminder_request(message, reminder_input)
            
        except Exception as e:
            logger.error(f"‚ùå Error en comando recordar: {e}")
            await message.answer("‚ùå Error creando recordatorio. Intenta de nuevo.")
    
    async def _cmd_nota(self, message: Message):
        """Comando /nota - Guardar nota"""
        try:
            await self._register_user(message.from_user)
            
            # Extraer texto del comando
            command_text = message.text
            if not command_text or len(command_text.split()) < 2:
                await message.answer(
                    "üìù **Guardar nota**\n\n"
                    "Uso: `/nota <contenido>`\n\n"
                    "Ejemplos:\n"
                    "‚Ä¢ `/nota Idea: crear app de productividad`\n"
                    "‚Ä¢ `/nota Recordar comprar leche y pan`\n"
                    "‚Ä¢ `/nota Reflexi√≥n sobre la reuni√≥n de hoy`",
                    parse_mode="Markdown"
                )
                return
            
            # Remover comando y obtener contenido
            note_text = command_text[6:].strip()  # Remover "/nota "
            note_text = sanitize_input(note_text)
            
            if not note_text:
                await message.answer("‚ùå El contenido de la nota no puede estar vac√≠o.")
                return
            
            # Guardar nota
            success = await self.note_manager.create_note(
                user_id=message.from_user.id,
                note_text=note_text,
                auto_classify=True
            )
            
            if success:
                await message.answer(
                    f"‚úÖ **Nota guardada**\n\nüìù {note_text[:100]}{'...' if len(note_text) > 100 else ''}",
                    parse_mode="Markdown"
                )
                
                # Agregar contexto
                await self.memory_index.add_context(
                    message.from_user.id,
                    f"Guard√≥ nota sobre: {note_text[:50]}",
                    "note_creation"
                )
            else:
                await message.answer("‚ùå Error guardando la nota. Intenta de nuevo.")
                
        except Exception as e:
            logger.error(f"‚ùå Error en comando nota: {e}")
            await message.answer("‚ùå Error guardando nota. Intenta de nuevo.")
    
    async def _cmd_listar(self, message: Message):
        """Comando /listar - Mostrar recordatorios pendientes"""
        try:
            await self._register_user(message.from_user)
            
            # Limpiar recordatorios pasados autom√°ticamente
            cleaned_count = await self.reminder_manager.cleanup_past_reminders(message.from_user.id)
            
            # Obtener recordatorios pendientes (solo futuros)
            reminders = await self.reminder_manager.get_pending_reminders_for_user(
                message.from_user.id,
                limit=10
            )
            
            if not reminders:
                cleanup_msg = f"\n\nüßπ Se limpiaron {cleaned_count} recordatorios pasados." if cleaned_count > 0 else ""
                await message.answer(
                    f"üì≠ **No tienes recordatorios pendientes**\n\n"
                    f"¬°Perfecto! Tu agenda est√° limpia.{cleanup_msg}\n\n"
                    "Usa `/recordar` para crear nuevos recordatorios.",
                    parse_mode="Markdown"
                )
                return
            
            # Formatear lista
            message_text = "üìã **Tus pr√≥ximos recordatorios:**\n\n"
            
            for i, reminder in enumerate(reminders, 1):
                date_str = format_datetime_for_user(reminder.date)
                text = reminder.text[:60] + "..." if len(reminder.text) > 60 else reminder.text
                
                message_text += f"{i}. üìÖ {date_str}\n"
                message_text += f"   üìù {text}\n\n"
            
            # Truncar si es muy largo
            message_text = truncate_text(message_text)
            
            await message.answer(message_text, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"‚ùå Error en comando listar: {e}")
            await message.answer("‚ùå Error obteniendo recordatorios. Intenta de nuevo.")
    
    async def _cmd_buscar(self, message: Message):
        """Comando /buscar - Buscar notas"""
        try:
            await self._register_user(message.from_user)
            
            # Extraer t√©rmino de b√∫squeda
            command_text = message.text
            if not command_text or len(command_text.split()) < 2:
                await message.answer(
                    "üîç **Buscar en tus notas**\n\n"
                    "Uso: `/buscar <t√©rmino>`\n\n"
                    "Ejemplos:\n"
                    "‚Ä¢ `/buscar trabajo`\n"
                    "‚Ä¢ `/buscar ideas de proyecto`\n"
                    "‚Ä¢ `/buscar reuni√≥n`",
                    parse_mode="Markdown"
                )
                return
            
            # Remover comando y obtener t√©rmino
            search_query = command_text[8:].strip()  # Remover "/buscar "
            search_query = sanitize_input(search_query)
            
            if not search_query:
                await message.answer("‚ùå El t√©rmino de b√∫squeda no puede estar vac√≠o.")
                return
            
            # Buscar notas
            notes = await self.note_manager.search_notes(
                user_id=message.from_user.id,
                query=search_query,
                use_ai_search=True,
                limit=8
            )
            
            if not notes:
                await message.answer(
                    f"üîç **Sin resultados para '{search_query}'**\n\n"
                    "No encontr√© notas que coincidan.\n\n"
                    "Intenta con otros t√©rminos o usa `/nota` para crear nuevas notas.",
                    parse_mode="Markdown"
                )
                return
            
            # Formatear resultados
            message_text = f"üîç **Resultados para '{search_query}':**\n\n"
            
            for i, note in enumerate(notes, 1):
                note_preview = note.text[:80] + "..." if len(note.text) > 80 else note.text
                date_str = note.created_at.strftime("%d/%m")
                
                message_text += f"{i}. üìù {note_preview}\n"
                message_text += f"   üìÖ {date_str}"
                
                if note.tags:
                    tags_str = ", ".join(note.tags[:3])
                    message_text += f" | üè∑Ô∏è {tags_str}"
                
                message_text += "\n\n"
            
            # Truncar si es muy largo
            message_text = truncate_text(message_text)
            
            await message.answer(message_text, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"‚ùå Error en comando buscar: {e}")
            await message.answer("‚ùå Error buscando notas. Intenta de nuevo.")
    
    async def _cmd_resumen(self, message: Message):
        """Comando /resumen - Generar resumen semanal"""
        try:
            await self._register_user(message.from_user)
            
            # Mostrar mensaje de procesamiento
            processing_msg = await message.answer("üìä Generando tu resumen semanal con IA...")
            
            # Obtener datos de la semana
            reminders_summary = await self.reminder_manager.get_weekly_reminder_summary(
                message.from_user.id
            )
            notes_summary = await self.note_manager.get_weekly_notes_summary(
                message.from_user.id
            )
            
            # Generar resumen con IA
            user_name = message.from_user.first_name or "Usuario"
            summary = await self.ai_interpreter.generate_weekly_summary(
                reminders=reminders_summary.get("reminders", []),
                notes=notes_summary.get("notes", []),
                user_name=user_name
            )
            
            # Agregar estad√≠sticas
            stats_text = f"\n\nüìä **Estad√≠sticas de la semana:**\n"
            stats_text += f"‚è∞ Recordatorios: {reminders_summary['total']}\n"
            stats_text += f"üìù Notas: {notes_summary['total']}\n"
            
            full_summary = summary + stats_text
            
            # Editar mensaje de procesamiento
            await processing_msg.edit_text(
                truncate_text(full_summary),
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error en comando resumen: {e}")
            await message.answer("‚ùå Error generando resumen. Intenta de nuevo.")
    
    async def _cmd_calendar(self, message: Message):
        """Comando /calendar - Estado de Apple Calendar"""
        try:
            await self._register_user(message.from_user)
            
            # Importar aqu√≠ para evitar ciclos
            from bot.calendar_integration import apple_calendar
            
            if not apple_calendar:
                await message.answer(
                    "‚ùå **Apple Calendar no configurado**\n\n"
                    "La integraci√≥n con Apple Calendar no est√° disponible.\n"
                    "Los recordatorios se crean solo en el bot.",
                    parse_mode="Markdown"
                )
                return
            
            # Probar conexi√≥n
            processing_msg = await message.answer("üîÑ Verificando conexi√≥n con Apple Calendar...")
            
            try:
                calendar_info = await apple_calendar.test_connection()
                
                if calendar_info.get("success", False):
                    status_text = f"""üçé **Apple Calendar - Estado**

‚úÖ **Conectado exitosamente**

üìß **Email:** {calendar_info.get('email', 'N/A')}
üìÖ **Calendario:** {calendar_info.get('calendar_name', 'N/A')}
üåê **Servidor:** {calendar_info.get('server', 'N/A')}
üìä **Eventos:** {calendar_info.get('events_count', 'N/A')}

üéØ **Funcionalidad:**
‚Ä¢ Los recordatorios se crean autom√°ticamente en tu calendario
‚Ä¢ Duraci√≥n inteligente seg√∫n el tipo de evento
‚Ä¢ Sincronizaci√≥n con todos tus dispositivos Apple

üí° **Pr√≥ximo recordatorio se sincronizar√° autom√°ticamente**"""
                else:
                    error_msg = calendar_info.get('error', 'Error desconocido')
                    status_text = f"""‚ùå **Error en Apple Calendar**

üî¥ **No conectado**

‚ö†Ô∏è **Error:** {error_msg}

üí° **Posibles soluciones:**
‚Ä¢ Verificar credenciales de iCloud
‚Ä¢ Comprobar contrase√±a de aplicaci√≥n
‚Ä¢ Revisar conexi√≥n a internet

üìù **Los recordatorios se siguen creando en el bot**"""
                
                await processing_msg.edit_text(status_text, parse_mode="Markdown")
                
            except Exception as e:
                await processing_msg.edit_text(
                    f"‚ùå **Error verificando Apple Calendar**\n\n"
                    f"Error: {str(e)}\n\n"
                    f"Los recordatorios funcionan normalmente en el bot.",
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"‚ùå Error en comando calendar: {e}")
            await message.answer("‚ùå Error verificando estado del calendario.")

    async def _cmd_status(self, message: Message):
        """Comando /status - Estado del sistema"""
        try:
            await self._register_user(message.from_user)
            
            # Informaci√≥n b√°sica
            uptime = datetime.utcnow()
            
            status_text = f"""‚ÑπÔ∏è **Estado del Sistema**

ü§ñ **Bot:** Activo
üóÑÔ∏è **Base de datos:** Conectada
üß† **IA:** OpenRouter (Llama 3.3)
‚è∞ **Scheduler:** Activo

üìä **Informaci√≥n:**
‚Ä¢ Verificaci√≥n: cada {settings.SCHEDULER_INTERVAL_SECONDS}s
‚Ä¢ Zona horaria: {settings.DEFAULT_TIMEZONE}
‚Ä¢ Versi√≥n: 1.0.0

‚ö° **Tu actividad:**
‚Ä¢ Usuario ID: `{message.from_user.id}`
‚Ä¢ √öltima consulta: {uptime.strftime('%H:%M:%S UTC')}

üîó **APIs:**
‚Ä¢ Telegram: ‚úÖ Conectado
‚Ä¢ OpenRouter: ‚úÖ Conectado  
‚Ä¢ MongoDB: ‚úÖ Conectado"""

            await message.answer(status_text, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"‚ùå Error en comando status: {e}")
            await message.answer("‚ùå Error obteniendo estado del sistema.")
    
    async def _cmd_help(self, message: Message):
        """Comando /help - Ayuda"""
        try:
            help_text = """‚ùì **Ayuda - OskarOS Assistant Bot**

üß† **¬øQu√© puedo hacer?**
Soy tu asistente personal con IA para recordatorios y notas.

‚è∞ **Recordatorios simples:**
‚Ä¢ `/recordar llamar m√©dico ma√±ana 9am`
‚Ä¢ "Recu√©rdame entregar proyecto en 3 d√≠as"
‚Ä¢ "ma√±ana a las 8 ir al gym"

üîÑ **Recordatorios recurrentes (¬°NUEVO!):**
‚Ä¢ "tomar pastilla todos los d√≠as a las 8"
‚Ä¢ "ejercitar todos los lunes"
‚Ä¢ "reuni√≥n cada semana"
‚Ä¢ "d√≠a por medio revisar email"
‚Ä¢ "medicamento cada 8 horas"
‚Ä¢ "backup cada mes"
‚Ä¢ "llamar mam√° todos los domingos"

ÔøΩ **Apple Calendar (¬°INTEGRADO!):**
‚Ä¢ Los recordatorios se crean autom√°ticamente en tu calendario
‚Ä¢ Sincronizaci√≥n con iPhone, iPad, Mac
‚Ä¢ `/calendar` - Ver estado de la integraci√≥n
‚Ä¢ Duraci√≥n inteligente seg√∫n el tipo de evento

ÔøΩüìù **Notas:**
‚Ä¢ `/nota Idea: crear app productividad`
‚Ä¢ `/buscar trabajo` - Buscar notas
‚Ä¢ Clasificaci√≥n autom√°tica por IA

üìä **An√°lisis:**
‚Ä¢ `/listar` - Ver pr√≥ximos recordatorios
‚Ä¢ `/resumen` - Resumen semanal con IA
‚Ä¢ `/status` - Estado del sistema

üî• **Caracter√≠sticas √∫nicas:**
‚Ä¢ Interpreto lenguaje natural y modismos chilenos
‚Ä¢ Recordatorios recurrentes autom√°ticos
‚Ä¢ Pre-recordatorios (7d, 2d, 1d)
‚Ä¢ B√∫squeda sem√°ntica inteligente
‚Ä¢ Aprendo tus patrones y preferencias
‚Ä¢ Integraci√≥n completa con Apple Calendar

üá®üá± **Lenguaje chileno:**
‚Ä¢ "al tiro comprar pan"
‚Ä¢ "lueguito llamar jefe"
‚Ä¢ "tempranito ejercitar"

üí° **Ejemplos pr√°cticos:**
1. "Recu√©rdame ir al gym en 2 horas"
2. "pastillas todos los d√≠as 8am"
3. "examen el 5 de noviembre" ‚Üí ¬°Se crea en tu calendario!
4. "/nota Reflexi√≥n: el proyecto va bien"
5. "/buscar ideas de vacaciones"
6. "/resumen" para ver tu semana

¬øNecesitas algo espec√≠fico? ¬°Solo preg√∫ntame! üòä"""

            await message.answer(help_text, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"‚ùå Error en comando help: {e}")
            await message.answer("‚ùå Error mostrando ayuda.")
    
    # --- MANEJO DE MENSAJES ---
    
    async def _handle_text_message(self, message: Message):
        """Manejar mensajes de texto general"""
        try:
            await self._register_user(message.from_user)
            
            text = sanitize_input(message.text)
            
            # Detectar si es una solicitud de recordatorio
            if self._is_reminder_request(text):
                await self._process_reminder_request(message, text)
            else:
                # Mensaje general - dar sugerencia amigable
                suggestions = await self.memory_index.suggest_improvements(message.from_user.id)
                
                response = "üëã ¬°Hola! Puedo ayudarte con recordatorios y notas.\n\n"
                response += "üí° **Sugerencias:**\n"
                response += "\n".join(f"‚Ä¢ {suggestion}" for suggestion in suggestions[:2])
                response += "\n\nüìã Usa `/help` para ver todos los comandos."
                
                await message.answer(response, parse_mode="Markdown")
                
                # Guardar contexto
                await self.memory_index.add_context(
                    message.from_user.id,
                    f"Mensaje general: {text[:50]}",
                    "general_message"
                )
                
        except Exception as e:
            logger.error(f"‚ùå Error manejando mensaje de texto: {e}")
            await message.answer("‚ùå Error procesando mensaje. Usa `/help` para ver comandos disponibles.")
    
    def _is_reminder_request(self, text: str) -> bool:
        """Detectar si un texto es una solicitud de recordatorio - VERSI√ìN ULTRA COMPLETA"""
        
        # Palabras clave para recordatorios en espa√±ol
        reminder_keywords = [
            # Comandos directos
            "recu√©rdame", "recordar", "av√≠same", "avisar", "alerta", "alarma",
            "notif√≠came", "notificar", "alertar", "programar", "agendar",
            
            # Expresiones temporales b√°sicas
            "en ", "dentro de", "despu√©s de", "antes de", "desde", "hasta",
            "ma√±ana", "hoy", "ayer", "pasado ma√±ana", "anteayer",
            "pr√≥xim", "siguiente", "que viene", "entrante", "venidero",
            "esta semana", "la pr√≥xima", "el otro", "la otra",
            
            # Expresiones de tiempo chilenas/coloquiales
            "al tiro", "al rato", "lueguito", "ratito", "un cachito",
            "altiro", "altoque", "yapo", "cach√°i", "bac√°n",
            "en la once", "en la ma√±anita", "tempranito",
            
            # D√≠as espec√≠ficos (espa√±ol e ingl√©s)
            "lunes", "martes", "mi√©rcoles", "jueves", "viernes", "s√°bado", "domingo",
            "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday",
            "mon", "tue", "wed", "thu", "fri", "sat", "sun",
            
            # Meses (espa√±ol e ingl√©s)
            "enero", "febrero", "marzo", "abril", "mayo", "junio",
            "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre",
            "january", "february", "march", "april", "may", "june",
            "july", "august", "september", "october", "november", "december",
            "jan", "feb", "mar", "apr", "may", "jun",
            "jul", "aug", "sep", "oct", "nov", "dec",
            
            # Palabras acad√©micas y profesionales
            "evaluaci√≥n", "examen", "prueba", "control", "test", "quiz", "certamen",
            "entrega", "tarea", "trabajo", "informe", "proyecto", "ensayo", "reporte",
            "presentaci√≥n", "exposici√≥n", "defensa", "seminario", "conferencia",
            "reuni√≥n", "junta", "meeting", "call", "videoconferencia",
            "fecha", "deadline", "vencimiento", "plazo", "l√≠mite", "cutoff",
            "due date", "submission", "delivery", "handout",
            
            # Expresiones de tiempo espec√≠ficas
            "a las", "al mediod√≠a", "a medianoche", "al amanecer", "al atardecer",
            "en la ma√±ana", "en la tarde", "en la noche", "en la madrugada",
            "por la ma√±ana", "por la tarde", "por la noche", "por la madrugada",
            "de ma√±ana", "de tarde", "de noche", "de madrugada",
            "am", "pm", "hrs", "horas", "minutos", "segundos", "mins", "segs",
            "h", "min", "sec", "o'clock",
            
            # Eventos y ocasiones
            "cumplea√±os", "cumple", "aniversario", "graduaci√≥n", "boda", "matrimonio",
            "fiesta", "celebraci√≥n", "evento", "cita", "appointment", "date",
            "viaje", "vacaciones", "feriado", "holiday", "trip", "travel",
            
            # Actividades cotidianas
            "hacer", "ir", "venir", "llegar", "salir", "partir", "volver", "regresar",
            "llamar", "telefonear", "contactar", "escribir", "enviar", "mandar",
            "comprar", "pagar", "cobrar", "depositar", "transferir",
            "estudiar", "leer", "practicar", "ejercitar", "entrenar", "gym",
            "comer", "almorzar", "cenar", "desayunar", "tomar", "beber",
            "limpiar", "ordenar", "arreglar", "reparar", "revisar", "chequear",
            "trabajar", "terminar", "finalizar", "completar", "enviar",
            
            # Actividades m√©dicas y personales
            "m√©dico", "doctor", "dentista", "cita m√©dica", "consulta", "control",
            "medicamento", "pastilla", "medicina", "tratamiento", "terapia",
            "ejercicio", "deporte", "correr", "caminar", "nadar", "yoga",
            "dieta", "r√©gimen", "peso", "dormir", "despertar", "levantarse",
            
            # Expresiones de urgencia/importancia
            "urgente", "importante", "cr√≠tico", "vital", "esencial", "necesario",
            "imperdible", "fundamental", "clave", "priority", "asap", "ya",
            "emergency", "emergencia", "crisis", "problema",
            
            # Frecuencia y repetici√≥n
            "diario", "semanal", "mensual", "anual", "cada", "todos los",
            "siempre", "nunca", "a veces", "ocasional", "regular",
            "daily", "weekly", "monthly", "yearly", "every",
            
            # Expresiones vagas que podr√≠an ser recordatorios
            "no olvides", "no te olvides", "acu√©rdate", "recuerda",
            "don't forget", "remember", "remind", "note", "memo",
            "tengo que", "debo", "necesito", "hay que", "toca",
            "i need to", "i have to", "i must", "should"
        ]
        
        # Patrones de fecha num√©rica (m√°s completos)
        date_patterns = [
            r'\b\d{1,2}/\d{1,2}/\d{4}\b',          # DD/MM/YYYY
            r'\b\d{1,2}/\d{1,2}/\d{2}\b',          # DD/MM/YY
            r'\b\d{1,2}-\d{1,2}-\d{4}\b',          # DD-MM-YYYY
            r'\b\d{1,2}\.\d{1,2}\.\d{4}\b',        # DD.MM.YYYY
            r'\b\d{4}/\d{1,2}/\d{1,2}\b',          # YYYY/MM/DD
            r'\b\d{4}-\d{1,2}-\d{1,2}\b',          # YYYY-MM-DD (ISO)
            r'\b\d{1,2}:\d{2}\b',                  # HH:MM
            r'\b\d{1,2}h\d{2}\b',                  # 14h30
            r'\b\d{1,2}:\d{2}(am|pm)\b',           # 2:30pm
            r'\b\d{1,2}\s?(am|pm)\b',              # 3pm, 8 am
            r'\b\d{1,2}hs?\b',                     # 15hs, 8h
            r'\b\d{1,2}:\d{2}:\d{2}\b',            # HH:MM:SS
        ]
        
        # Patrones acad√©micos espec√≠ficos (expandidos)
        academic_patterns = [
            r'fecha de entrega',
            r'fecha limite',
            r'fecha tope',
            r'entregar el',
            r'entrega el',
            r'para el',
            r'hasta el',
            r'deadline',
            r'due date',
            r'vence el',
            r'vencimiento',
            r'antes del',
            r'submission',
            r'hand\s?in',
            r'turn\s?in',
            r'\b\d+%\s+\w+',                      # 25% RA1-2-3
            r'ra\d+-\d+-\d+',                     # RA1-2-3
            r'evaluaci[√≥o]n\s+\w+',               # evaluaci√≥n escrita
            r'examen\s+\w+',                      # examen final
            r'prueba\s+\w+',                      # prueba parcial
            r'control\s+\w+',                     # control de lectura
            r'certamen\s+\w+',                    # certamen 1
            r'tarea\s+\d+',                       # tarea 3
            r'tp\s+\d+',                          # TP 2 (trabajo pr√°ctico)
            r'lab\s+\d+',                         # lab 4 (laboratorio)
            r'quiz\s+\d+',                        # quiz 1
        ]
        
        # Patrones de tiempo relativo (muy expandidos)
        time_relative_patterns = [
            # Tiempo espec√≠fico
            r'en\s+\d+\s+(segundo|minuto|hora|d√≠a|semana|mes|a√±o)s?',
            r'dentro\s+de\s+\d+',
            r'despu√©s\s+de\s+\d+',
            r'hace\s+\d+',
            r'en\s+\d+h\d+',                      # en 2h30
            r'en\s+\d+:\d+',                      # en 1:30
            
            # Expresiones relativas
            r'el\s+(pr√≥ximo|siguiente|otro)',
            r'la\s+(pr√≥xima|siguiente|otra)',
            r'este\s+(lunes|martes|mi√©rcoles|jueves|viernes|s√°bado|domingo)',
            r'esta\s+(semana|tarde|ma√±ana|noche)',
            r'next\s+(monday|tuesday|wednesday|thursday|friday|saturday|sunday)',
            r'this\s+(week|afternoon|morning|evening)',
            
            # Expresiones chilenas
            r'el\s+otro\s+(lunes|martes|mi√©rcoles|jueves|viernes)',
            r'la\s+otra\s+semana',
            r'pasado\s+ma√±ana',
            r'antes\s+de\s+ayer',
            r'al\s+rato',
            r'al\s+tiro',
            r'lueguito',
            
            # Expresiones vagas pero √∫tiles
            r'pronto',
            r'm√°s\s+tarde',
            r'despu√©s',
            r'luego',
            r'soon',
            r'later',
            r'eventually',
            
            # Rangos de tiempo
            r'entre\s+las?\s+\d+',
            r'desde\s+las?\s+\d+',
            r'hasta\s+las?\s+\d+',
            r'de\s+\d+\s+a\s+\d+',
            r'from\s+\d+\s+to\s+\d+',
            
            # PATRONES RECURRENTES (NUEVOS)
            r'cada\s+\d+\s+(minutos?|horas?|d√≠as?|semanas?|meses?)',
            r'todos?\s+los?\s+(d√≠as?|lunes|martes|mi√©rcoles|jueves|viernes|s√°bados?|domingos?)',
            r'todas?\s+las?\s+(ma√±anas?|tardes?|noches?|semanas?)',
            r'every\s+\d+\s+(minutes?|hours?|days?|weeks?|months?)',
            r'every\s+(day|monday|tuesday|wednesday|thursday|friday|saturday|sunday)',
            r'daily|weekly|monthly|yearly',
            r'diario|semanal|mensual|anual',
            r'd√≠a\s+por\s+medio',
            r'd√≠a\s+s√≠\s+d√≠a\s+no',
            r'inter\s?diario',
            r'cada\s+dos\s+d√≠as',
            r'cada\s+tercer\s+d√≠a',
            r'cada\s+otra\s+semana',
            r'cada\s+dos\s+semanas',
            r'fin\s+de\s+semana',
            r'd√≠as?\s+laborables?',
            r'd√≠as?\s+h√°biles?',
            r'entre\s+semana',
            r'lunes\s+a\s+viernes',
            r'monday\s+to\s+friday',
            r'weekdays?',
            r'weekends?',
        ]
        
        # Patrones de contexto de actividad (nuevo)
        activity_patterns = [
            # Trabajo/estudio
            r'(trabajo|office|oficina|estudio|universidad|colegio)',
            r'(meeting|reuni√≥n|junta|conferencia|videoconferencia)',
            r'(proyecto|informe|reporte|presentaci√≥n|tarea)',
            
            # Personal/salud
            r'(m√©dico|doctor|dentista|cita|consulta|control)',
            r'(medicamento|pastilla|medicina|tratamiento)',
            r'(ejercicio|gym|deporte|correr|caminar)',
            
            # Finanzas
            r'(pagar|cobrar|banco|cuenta|tarjeta|transferencia)',
            r'(factura|boleta|recibo|impuesto|dividendo)',
            
            # Social/familia
            r'(cumplea√±os|cumple|aniversario|fiesta|celebraci√≥n)',
            r'(llamar|contactar|escribir|visitar|ver)',
            r'(mam√°|pap√°|familia|amigo|novia|polola)',
            
            # Casa/compras
            r'(comprar|super|supermercado|tienda|mall)',
            r'(limpiar|ordenar|arreglar|reparar|mantener)',
            r'(cocinar|comer|almorzar|cenar|desayunar)',
        ]
        
        text_lower = text.lower()
        
        # 1. Verificar palabras clave de recordatorio
        has_reminder_keywords = any(keyword in text_lower for keyword in reminder_keywords)
        
        # 2. Verificar patrones de fecha num√©rica
        has_date_pattern = any(re.search(pattern, text_lower) for pattern in date_patterns)
        
        # 3. Verificar patrones acad√©micos
        has_academic_pattern = any(re.search(pattern, text_lower, re.IGNORECASE) for pattern in academic_patterns)
        
        # 4. Verificar patrones de tiempo relativo
        has_time_relative = any(re.search(pattern, text_lower, re.IGNORECASE) for pattern in time_relative_patterns)
        
        # 5. Verificar contexto de actividad
        has_activity_context = any(re.search(pattern, text_lower, re.IGNORECASE) for pattern in activity_patterns)
        
        # 6. Verificar si tiene estructura de recordatorio (longitud m√≠nima y contexto)
        has_context = len(text.split()) >= 2 and len(text) > 5
        
        # 7. Detectar fechas num√©ricas con contexto de acci√≥n
        has_numeric_date = re.search(r'\b\d{1,2}/\d{1,2}/\d{2,4}\b', text)
        has_action_context = any(word in text_lower for word in [
            "hacer", "ir", "venir", "llamar", "revisar", "estudiar", "pagar", 
            "comprar", "trabajar", "terminar", "enviar", "completar", "ejercitar"
        ])
        
        # 8. Detectar expresiones imperativas o de planificaci√≥n
        has_imperative = any(phrase in text_lower for phrase in [
            "tengo que", "debo", "necesito", "hay que", "toca", "me toca",
            "i need to", "i have to", "i must", "should", "gonna", "going to",
            "voy a", "vamos a", "plan to", "planear", "planifico"
        ])
        
        # 9. Detectar formato de lista o m√∫ltiples tareas
        has_list_format = (
            text.count('\n') > 1 or  # M√∫ltiples l√≠neas
            text.count('-') > 1 or   # Lista con guiones
            text.count('‚Ä¢') > 0 or   # Lista con bullets
            text.count('*') > 1 or   # Lista con asteriscos
            len(re.findall(r'\d+\.', text)) > 1  # Lista numerada
        )
        
        # 10. Detectar preguntas sobre tiempo (potenciales recordatorios)
        has_time_question = any(phrase in text_lower for phrase in [
            "cu√°ndo", "when", "qu√© hora", "what time", "a qu√© hora", "at what time"
        ]) and len(text.split()) > 2
        
        # 11. NUEVO: Detectar patrones recurrentes espec√≠ficos
        has_recurring_pattern = any(phrase in text_lower for phrase in [
            "todos los d√≠as", "every day", "daily", "diario", "diariamente",
            "cada d√≠a", "cada ma√±ana", "cada tarde", "cada noche",
            "todos los lunes", "todos los martes", "todos los mi√©rcoles", 
            "todos los jueves", "todos los viernes", "todos los s√°bados", "todos los domingos",
            "every monday", "every tuesday", "every wednesday", "every thursday", 
            "every friday", "every saturday", "every sunday",
            "d√≠a por medio", "d√≠a s√≠ d√≠a no", "cada dos d√≠as", "cada tercer d√≠a",
            "cada semana", "weekly", "semanal", "semanalmente",
            "cada mes", "monthly", "mensual", "mensualmente",
            "fin de semana", "weekends", "entre semana", "d√≠as laborables",
            "lunes a viernes", "monday to friday", "weekdays",
            "cada otra semana", "cada dos semanas", "bi-weekly"
        ])
        
        # 12. Detectar frecuencia num√©rica (cada X tiempo)
        has_numeric_frequency = any(re.search(pattern, text_lower) for pattern in [
            r'cada\s+\d+\s+(minutos?|horas?|d√≠as?|semanas?|meses?)',
            r'every\s+\d+\s+(minutes?|hours?|days?|weeks?|months?)',
            r'cada\s+\d+h',  # cada 8h
            r'cada\s+\d+hrs?',  # cada 12hrs
        ])
        
        # Es recordatorio si cumple cualquiera de estos criterios:
        is_reminder = (
            has_reminder_keywords or
            (has_date_pattern and has_action_context) or
            has_academic_pattern or
            (has_time_relative and has_context) or
            (has_numeric_date and len(text) > 15) or
            (has_activity_context and (has_date_pattern or has_time_relative)) or
            (has_imperative and (has_date_pattern or has_time_relative or len(text) > 20)) or
            (has_list_format and (has_date_pattern or has_academic_pattern)) or
            (has_time_question and has_activity_context) or
            has_recurring_pattern or  # NUEVO: Patrones recurrentes
            (has_numeric_frequency and has_activity_context)  # NUEVO: Frecuencia num√©rica con contexto
        )
        
        # Log para debugging (m√°s detallado)
        if is_reminder:
            logger.info(f"üìù Detectado como recordatorio: "
                       f"keywords={has_reminder_keywords}, date={has_date_pattern}, "
                       f"academic={has_academic_pattern}, relative={has_time_relative}, "
                       f"activity={has_activity_context}, imperative={has_imperative}, "
                       f"list={has_list_format}, question={has_time_question}, "
                       f"recurring={has_recurring_pattern}, frequency={has_numeric_frequency}")
        
        return is_reminder
    
    async def _process_reminder_request(self, message: Message, reminder_input: str):
        """Procesar solicitud de recordatorio - Sistema inteligente con recurrencia"""
        try:
            # Mostrar mensaje de procesamiento
            processing_msg = await message.answer("ü§ñ Interpretando con IA...")
            
            # PRIMERO: Verificar si es un recordatorio recurrente
            recurring_reminders = await self.ai_interpreter.parse_recurring_reminder(reminder_input)
            
            if recurring_reminders:
                # Procesar recordatorios recurrentes
                created_count = 0
                failed_count = 0
                
                for reminder_data in recurring_reminders:
                    try:
                        # Mejorar texto del recordatorio individual
                        context = await self.memory_index.get_user_context(message.from_user.id, limit=3)
                        enhanced_text = await self.ai_interpreter.enhance_reminder_text(reminder_data['text'], context)
                        
                        # Crear recordatorio
                        success = await self.reminder_manager.create_reminder(
                            user_id=message.from_user.id,
                            original_input=reminder_data['text'],
                            reminder_text=enhanced_text,
                            target_date=reminder_data['date']
                        )
                        
                        if success:
                            created_count += 1
                        else:
                            failed_count += 1
                            
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Error creando recordatorio recurrente: {e}")
                        failed_count += 1
                
                # Respuesta para recordatorios recurrentes
                if created_count > 0:
                    result_text = f"üîÑ **{created_count} recordatorios recurrentes creados**\n\n"
                    
                    # Mostrar algunos ejemplos
                    for i, reminder_data in enumerate(recurring_reminders[:3], 1):
                        date_str = format_datetime_for_user(reminder_data['date'])
                        result_text += f"{i}. {reminder_data['text']}\n   üìÖ {date_str}\n"
                    
                    if len(recurring_reminders) > 3:
                        result_text += f"   ... y {len(recurring_reminders) - 3} m√°s\n"
                    
                    result_text += "\nüîî Todos incluyen pre-recordatorios autom√°ticos"
                    
                    if failed_count > 0:
                        result_text += f"\n\n‚ö†Ô∏è {failed_count} recordatorios fallaron"
                    
                    # Agregar a memoria
                    await self.memory_index.add_context(
                        message.from_user.id,
                        f"Cre√≥ {created_count} recordatorios recurrentes: {reminder_input[:50]}",
                        "recurring_reminder"
                    )
                    
                    await processing_msg.edit_text(result_text, parse_mode="Markdown")
                    return
                else:
                    # Si fall√≥ todo, continuar con m√©todo normal
                    pass
            
            # SEGUNDO: Intentar con prompt acad√©mico (m√∫ltiples recordatorios)
            reminders = await self.ai_interpreter.parse_multiple_reminders(reminder_input)
            
            if reminders:
                # Crear recordatorios usando el m√©todo m√∫ltiple
                created_count = 0
                failed_count = 0
                
                for reminder_data in reminders:
                    try:
                        # Mejorar texto del recordatorio individual
                        context = await self.memory_index.get_user_context(message.from_user.id, limit=3)
                        enhanced_text = await self.ai_interpreter.enhance_reminder_text(reminder_data['text'], context)
                        
                        # Crear recordatorio
                        success = await self.reminder_manager.create_reminder(
                            user_id=message.from_user.id,
                            original_input=reminder_data['text'],
                            reminder_text=enhanced_text,
                            target_date=reminder_data['date']
                        )
                        
                        if success:
                            created_count += 1
                            # Agregar a memoria
                            await self.memory_index.add_context(
                                message.from_user.id,
                                f"Cre√≥ recordatorio: {enhanced_text[:50]}",
                                "reminder_creation"
                            )
                        else:
                            # Verificar si fue rechazado por fecha pasada
                            from datetime import datetime
                            if reminder_data['date'] <= datetime.utcnow():
                                logger.warning(f"‚ö†Ô∏è Recordatorio rechazado por fecha pasada: {reminder_data['text']}")
                            failed_count += 1
                            
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Error creando recordatorio individual: {e}")
                        failed_count += 1
                
                # Respuesta final
                if created_count > 0:
                    if created_count == 1:
                        # Un solo recordatorio
                        reminder_data = reminders[0]
                        date_str = format_datetime_for_user(reminder_data['date'])
                        result_text = f"‚úÖ **Recordatorio creado**\n\nüìù {reminder_data['text']}\nüìÖ {date_str}\n\n‚è∞ Incluye pre-recordatorios autom√°ticos"
                    else:
                        # M√∫ltiples recordatorios
                        result_text = f"‚úÖ **{created_count} recordatorios creados**\n\n"
                        for i, reminder_data in enumerate(reminders[:created_count], 1):
                            date_str = format_datetime_for_user(reminder_data['date'])
                            result_text += f"{i}. {reminder_data['text']}\n   üìÖ {date_str}\n\n"
                        result_text += "‚è∞ Todos incluyen pre-recordatorios autom√°ticos"
                    
                    if failed_count > 0:
                        result_text += f"\n\n‚ö†Ô∏è {failed_count} recordatorios no se pudieron crear (fechas pasadas o errores)"
                
                    await processing_msg.edit_text(result_text, parse_mode="Markdown")
                    return
                else:
                    # Si no se cre√≥ ninguno con m√©todo m√∫ltiple, intentar m√©todo simple
                    pass
            
            # SEGUNDO: Si el m√©todo acad√©mico fall√≥, usar m√©todo de lenguaje natural
            logger.info("üîÑ M√©todo acad√©mico fall√≥, intentando con lenguaje natural...")
            target_date = await self.ai_interpreter.interpret_time_expression(reminder_input)
            
            if not target_date:
                await processing_msg.edit_text(
                    "‚ùå **No pude interpretar el tiempo**\n\n"
                    "Ejemplos v√°lidos:\n"
                    "‚Ä¢ 'recu√©rdame en 30 minutos'\n" 
                    "‚Ä¢ 'ma√±ana a las 9'\n"
                    "‚Ä¢ 'el 25 de octubre a las 15:00'\n"
                    "‚Ä¢ 'Evaluaci√≥n escrita 12/09/2025'\n\n"
                    "Intenta ser m√°s espec√≠fico con la fecha y hora.",
                    parse_mode="Markdown"
                )
                return
            
            # Mejorar texto del recordatorio
            context = await self.memory_index.get_user_context(message.from_user.id, limit=3)
            enhanced_text = await self.ai_interpreter.enhance_reminder_text(reminder_input, context)
            
            # Crear recordatorio √∫nico
            success = await self.reminder_manager.create_reminder(
                user_id=message.from_user.id,
                original_input=reminder_input,
                reminder_text=enhanced_text,
                target_date=target_date
            )
            
            if success:
                date_str = format_datetime_for_user(target_date)
                
                await processing_msg.edit_text(
                    f"‚úÖ **Recordatorio creado**\n\n"
                    f"üìù {enhanced_text}\n"
                    f"üìÖ {date_str}\n\n"
                    f"‚è∞ Incluye pre-recordatorios autom√°ticos",
                    parse_mode="Markdown"
                )
                
                # Agregar a memoria
                await self.memory_index.add_context(
                    message.from_user.id,
                    f"Cre√≥ recordatorio: {enhanced_text[:50]}",
                    "reminder_creation"
                )
            else:
                # Verificar si fue rechazado por fecha pasada
                from datetime import datetime
                if target_date <= datetime.utcnow():
                    await processing_msg.edit_text(
                        "‚ùå **La fecha ya pas√≥**\n\n"
                        f"üìÖ La fecha {format_datetime_for_user(target_date)} ya pas√≥.\n\n"
                        "Por favor, elige una fecha en el futuro.",
                        parse_mode="Markdown"
                    )
                else:
                    await processing_msg.edit_text("‚ùå Error creando recordatorio. Intenta de nuevo.")
            
        except Exception as e:
            logger.error(f"‚ùå Error procesando recordatorio: {e}")
            await message.answer("‚ùå Error procesando recordatorio. Intenta de nuevo.")


# Funci√≥n auxiliar para iniciar el bot (usado en main.py)
async def start_telegram_bot(bot_instance: TelegramBot):
    """Funci√≥n auxiliar para iniciar el bot"""
    await bot_instance.start()